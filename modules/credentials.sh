#!/bin/bash
###############################################################################
#  modules/credentials.sh - Credential management for Usenet services
###############################################################################

# Load credentials from 1Password
load_credentials_from_1p() {
  verbose "Loading credentials from 1Password..."
  
  # Source op-helper for 1Password access
  source "$SCRIPT_DIR/op-helper.sh"
  
  # Extract indexer API keys
  for indexer in NZBgeek "NZB Finder" "NZB.su" NZBPlanet; do
    local api_key=$(op_run item get "$indexer" --fields "API Key" 2>/dev/null | head -1)
    if [[ -n "$api_key" && "$api_key" != "N/A" ]]; then
      case "$indexer" in
        "NZBgeek") INDEXERS["NZBgeek"]="$api_key" ;;
        "NZB Finder") INDEXERS["NZBFinder"]="$api_key" ;;
        "NZB.su") INDEXERS["NZBsu"]="$api_key" ;;
        "NZBPlanet") INDEXERS["NZBPlanet"]="$api_key" ;;
      esac
    fi
  done
  
  # Extract provider credentials
  for provider in UsenetExpress Newshosting Frugalusenet; do
    local item_json=$(op_run item get "$provider" --format json 2>/dev/null | head -1)
    if [[ -n "$item_json" ]]; then
      local server=$(echo "$item_json" | jq -r '.fields[] | select(.label == "server" or .label == "host") | .value // empty' | head -1)
      local username=$(echo "$item_json" | jq -r '.fields[] | select(.label == "username" or .label == "email") | .value // empty' | head -1)
      local password=$(echo "$item_json" | jq -r '.fields[] | select(.label == "password") | .value // empty' | head -1)
      
      # Update PROVIDERS array if we got all required fields
      if [[ -n "$server" && -n "$username" && -n "$password" ]]; then
        case "$provider" in
          "Newshosting")
            PROVIDERS["Newshosting"]="${server:-news.newshosting.com}:563:${username}:${password}:30"
            ;;
          "UsenetExpress")
            PROVIDERS["UsenetExpress"]="${server:-usenetexpress.com}:563:${username}:${password}:20"
            ;;
          "Frugalusenet")
            PROVIDERS["Frugalusenet"]="${server:-newswest.frugalusenet.com}:563:${username}:${password}:10"
            ;;
        esac
      fi
    fi
  done
  
  # Extract SABnzbd credentials
  local sab_json=$(op_run item get "SABnzbd" --format json 2>/dev/null | head -1)
  if [[ -n "$sab_json" ]]; then
    local sab_api=$(echo "$sab_json" | jq -r '.fields[] | select(.label | test("api|key"; "i")) | .value // empty' | head -1)
    if [[ -n "$sab_api" && "$sab_api" != "N/A" ]]; then
      SABNZBD_API_KEY="$sab_api"
    fi
  fi
  
  success "Credentials loaded from 1Password"
}

# Save credentials to .env file
save_credentials_to_env() {
  local env_file="${1:-$SCRIPT_DIR/.env}"
  
  verbose "Saving credentials to $env_file"
  
  cat > "$env_file" <<EOF
# Generated by setup-all.sh on $(date)
# Usenet Stack Environment Variables

# Indexer API Keys
NZBGEEK_API_KEY="${INDEXERS[NZBgeek]}"
NZBFINDER_API_KEY="${INDEXERS[NZBFinder]}"
NZBSU_API_KEY="${INDEXERS[NZBsu]}"
NZBPLANET_API_KEY="${INDEXERS[NZBPlanet]}"

# SABnzbd
SABNZBD_API_KEY="${SABNZBD_API_KEY}"
SABNZBD_USERNAME="Aristoddle"
SABNZBD_PASSWORD="fishing123"

# Newshosting Provider
NEWSHOSTING_SERVER="news.newshosting.com"
NEWSHOSTING_PORT="563"
NEWSHOSTING_USERNAME="j3lanzone@gmail.com"
NEWSHOSTING_PASSWORD="@Kirsten123"
NEWSHOSTING_CONNECTIONS="30"

# UsenetExpress Provider
USENETEXPRESS_SERVER="usenetexpress.com"
USENETEXPRESS_PORT="563"
USENETEXPRESS_USERNAME="une3226253"
USENETEXPRESS_PASSWORD="kKqzQXPeN"
USENETEXPRESS_CONNECTIONS="20"

# Frugalusenet Provider
FRUGALUSENET_SERVER="newswest.frugalusenet.com"
FRUGALUSENET_PORT="563"
FRUGALUSENET_USERNAME="aristoddle"
FRUGALUSENET_PASSWORD="fishing123"
FRUGALUSENET_CONNECTIONS="10"
FRUGALUSENET_BACKUP="bonus.frugalusenet.com"

# Service URLs (internal Docker network)
PROWLARR_URL="http://prowlarr:9696"
SONARR_URL="http://sonarr:8989"
RADARR_URL="http://radarr:7878"
READARR_URL="http://readarr:8787"
MYLAR3_URL="http://mylar3:8090"
BAZARR_URL="http://bazarr:6767"
SABNZBD_URL="http://sabnzbd:8080"

# External URLs (for host access)
PROWLARR_EXTERNAL_URL="http://localhost:9696"
SONARR_EXTERNAL_URL="http://localhost:8989"
RADARR_EXTERNAL_URL="http://localhost:7878"
READARR_EXTERNAL_URL="http://localhost:8787"
MYLAR3_EXTERNAL_URL="http://localhost:8090"
BAZARR_EXTERNAL_URL="http://localhost:6767"
SABNZBD_EXTERNAL_URL="http://localhost:8080"
EOF
  
  chmod 600 "$env_file"
  success "Credentials saved to $env_file"
}

# Extract API key from service config file
extract_api_key_from_config() {
  local service="$1"
  local config_path="$CONFIG_DIR/$service"
  local api_key=""
  
  if [[ -f "$config_path/config.xml" ]]; then
    # XML format (Sonarr, Radarr, Prowlarr, etc.)
    api_key=$(grep -oP '(?<=<ApiKey>)[^<]+' "$config_path/config.xml" 2>/dev/null || echo "")
  elif [[ -f "$config_path/sabnzbd.ini" ]]; then
    # INI format (SABnzbd)
    api_key=$(grep -oP '(?<=api_key = )[^\s]+' "$config_path/sabnzbd.ini" 2>/dev/null || echo "")
  elif [[ -f "$config_path/server.conf" ]]; then
    # Alternative config locations
    api_key=$(grep -oP '(?<=apikey=)[^\s]+' "$config_path/server.conf" 2>/dev/null || echo "")
  fi
  
  echo "$api_key"
}

# Wait for service to generate API key
wait_for_api_key() {
  local service="$1"
  local max_attempts="${2:-30}"
  local attempt=0
  
  verbose "Waiting for $service to generate API key..."
  
  while (( attempt < max_attempts )); do
    local api_key=$(extract_api_key_from_config "$service")
    
    if [[ -n "$api_key" ]]; then
      success "$service API key found: $api_key"
      echo "$api_key"
      return 0
    fi
    
    ((attempt++))
    verbose "Attempt $attempt/$max_attempts - waiting 2 seconds..."
    sleep 2
  done
  
  error "Timeout waiting for $service API key"
  return 1
}

# Update service API keys in memory
update_service_api_keys() {
  verbose "Updating service API keys from config files..."
  
  declare -gA SERVICE_API_KEYS
  
  for service in prowlarr sonarr radarr readarr bazarr sabnzbd; do
    local api_key=$(extract_api_key_from_config "$service")
    if [[ -n "$api_key" ]]; then
      SERVICE_API_KEYS["$service"]="$api_key"
      verbose "$service API key: ${api_key:0:8}..."
    else
      verbose "$service API key not found"
    fi
  done
}

# Get API key for a specific service
get_service_api_key() {
  local service="$1"
  
  # Check if we have it in memory
  if [[ -n "${SERVICE_API_KEYS[$service]:-}" ]]; then
    echo "${SERVICE_API_KEYS[$service]}"
    return 0
  fi
  
  # Try to extract from config
  local api_key=$(extract_api_key_from_config "$service")
  if [[ -n "$api_key" ]]; then
    SERVICE_API_KEYS["$service"]="$api_key"
    echo "$api_key"
    return 0
  fi
  
  # Return empty string if not found
  echo ""
  return 1
}

# Validate all required credentials
validate_credentials() {
  local all_valid=true
  
  log "Validating credentials..."
  
  # Check indexer API keys
  for indexer in "${!INDEXERS[@]}"; do
    if [[ -z "${INDEXERS[$indexer]}" ]]; then
      error "Missing API key for $indexer"
      all_valid=false
    else
      success "$indexer API key present"
    fi
  done
  
  # Check provider credentials
  for provider in "${!PROVIDERS[@]}"; do
    IFS=':' read -r server port username password connections <<< "${PROVIDERS[$provider]}"
    if [[ -z "$server" || -z "$username" || -z "$password" ]]; then
      error "Missing credentials for $provider"
      all_valid=false
    else
      success "$provider credentials present"
    fi
  done
  
  # Check SABnzbd API key
  if [[ -z "$SABNZBD_API_KEY" ]]; then
    error "Missing SABnzbd API key"
    all_valid=false
  else
    success "SABnzbd API key present"
  fi
  
  if $all_valid; then
    success "All credentials validated"
    return 0
  else
    error "Credential validation failed"
    return 1
  fi
}

# Initialize credentials
init_credentials() {
  # Try to load from 1Password first
  if command -v op >/dev/null 2>&1; then
    load_credentials_from_1p
  fi
  
  # Load from .env file if it exists
  if [[ -f "$SCRIPT_DIR/.env" ]]; then
    verbose "Loading credentials from .env file"
    source "$SCRIPT_DIR/.env"
  fi
  
  # Update service API keys from config files
  update_service_api_keys
  
  # Validate what we have
  validate_credentials
}
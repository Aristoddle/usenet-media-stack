#!/usr/bin/env bash
##############################################################################
# Usenet Media Stack - Unified Management Interface
# 
# A complete media automation system with one-command deployment.
# Manages Sonarr, Radarr, SABnzbd, Prowlarr, Jellyfin and more.
#
# Usage: usenet <command> [options]
# Try 'usenet --help' for more information.
#
# Repository: https://github.com/Aristoddle/usenet-media-stack
# License: MIT
##############################################################################

set -euo pipefail

# Script configuration
readonly SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}" || echo "${BASH_SOURCE[0]}")")" && pwd)"
readonly LIB_DIR="$SCRIPT_DIR/lib"
readonly VERSION="2.0.0"

# Source libraries
source "$LIB_DIR/help.sh" 2>/dev/null || {
    echo "Error: Cannot find lib/help.sh. Is the installation complete?" >&2
    exit 1
}

##
# Main entry point
#
# Routes commands to appropriate handlers and manages global options.
##
main() {
    # Handle no arguments
    if [[ $# -eq 0 ]]; then
        show_main_help
        exit 0
    fi
    
    # Parse global options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            # Help variants
            --help|-h|help)
                if [[ "${2:-}" ]]; then
                    show_command_help "$2"
                else
                    show_main_help
                fi
                exit 0
                ;;
                
            # Version
            --version|-v|version)
                show_version
                exit 0
                ;;
                
            # Commands
            setup)
                shift
                exec "$LIB_DIR/commands/setup.sh" "$@"
                ;;
                
            manage)
                shift
                exec "$LIB_DIR/commands/manage.sh" "$@"
                ;;
                
            storage)
                shift
                exec "$LIB_DIR/commands/storage.sh" "$@"
                ;;
                
            status)
                exec "$LIB_DIR/commands/manage.sh" status "$@"
                ;;
                
            logs)
                shift
                exec "$LIB_DIR/commands/manage.sh" logs "$@"
                ;;
                
            test)
                shift
                exec "$LIB_DIR/commands/test.sh" "$@"
                ;;
                
            validate|check)
                exec "$LIB_DIR/commands/validate.sh" "$@"
                ;;
                
            deps|dependencies)
                exec "$LIB_DIR/commands/deps.sh" "$@"
                ;;
                
            backup)
                exec "$LIB_DIR/commands/backup.sh" backup "$@"
                ;;
                
            restore)
                shift
                exec "$LIB_DIR/commands/backup.sh" restore "$@"
                ;;
                
            update|upgrade)
                exec "$LIB_DIR/commands/update.sh" "$@"
                ;;
                
            uninstall|remove)
                exec "$LIB_DIR/commands/uninstall.sh" "$@"
                ;;
                
            # Unknown command
            *)
                echo "Error: Unknown command '$1'" >&2
                echo "Try 'usenet --help' for available commands." >&2
                exit 1
                ;;
        esac
    done
}

##
# Show help for specific command
##
show_command_help() {
    local command="$1"
    
    case "$command" in
        setup)
            show_setup_help
            ;;
        manage)
            "$LIB_DIR/commands/manage.sh" --help
            ;;
        storage)
            show_storage_help
            ;;
        *)
            echo "No help available for '$command'" >&2
            exit 1
            ;;
    esac
}

# Ensure we're not running as root (Docker should handle privileges)
if [[ $EUID -eq 0 ]] && [[ "${ALLOW_ROOT:-}" != "true" ]]; then
    echo "Error: Don't run this script as root." >&2
    echo "Docker will request sudo when needed." >&2
    exit 1
fi

# Run main function
main "$@"
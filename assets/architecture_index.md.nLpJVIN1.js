import{_ as n,c as a,o as e,ag as i}from"./chunks/framework.BJipvzRy.js";const b=JSON.parse('{"title":"Architecture Overview","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/index.md","filePath":"architecture/index.md","lastUpdated":null}'),p={name:"architecture/index.md"};function l(r,s,t,c,o,d){return e(),a("div",null,s[0]||(s[0]=[i(`<h1 id="architecture-overview" tabindex="-1">Architecture Overview <a class="header-anchor" href="#architecture-overview" aria-label="Permalink to &quot;Architecture Overview&quot;">​</a></h1><p>The Usenet Media Stack is built on a foundation of professional software engineering principles, combining hot-swappable JBOD storage, universal hardware optimization, and a sophisticated CLI following modern design patterns.</p><h2 id="core-design-philosophy" tabindex="-1">Core Design Philosophy <a class="header-anchor" href="#core-design-philosophy" aria-label="Permalink to &quot;Core Design Philosophy&quot;">​</a></h2><h3 id="bell-labs-standards" tabindex="-1">Bell Labs Standards <a class="header-anchor" href="#bell-labs-standards" aria-label="Permalink to &quot;Bell Labs Standards&quot;">​</a></h3><p>The codebase follows principles taught by <strong>Stan Eisenstat</strong> at Yale:</p><ul><li><strong>Clarity over cleverness</strong> - Every function is documented, every error teaches</li><li><strong>Professional standards</strong> - 80-character lines, comprehensive error handling</li><li><strong>Quality architecture</strong> - Single responsibility, proper abstractions, testing</li></ul><h3 id="modern-cli-design" tabindex="-1">Modern CLI Design <a class="header-anchor" href="#modern-cli-design" aria-label="Permalink to &quot;Modern CLI Design&quot;">​</a></h3><p>Inspired by industry-leading tools:</p><ul><li><strong>Git</strong>: Subcommand + flags perfection (<code>git commit -m &quot;msg&quot; --amend</code>)</li><li><strong>Docker</strong>: Object + action model (<code>docker container run --rm -it</code>)</li><li><strong>Pyenv</strong>: Workflow-oriented with smart help (<code>pyenv install 3.9.7</code>)</li></ul><h2 id="system-architecture" tabindex="-1">System Architecture <a class="header-anchor" href="#system-architecture" aria-label="Permalink to &quot;System Architecture&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────────────────────────────────────────────────────┐</span></span>
<span class="line"><span>│                     Usenet Media Stack                     │</span></span>
<span class="line"><span>├─────────────────────────────────────────────────────────────┤</span></span>
<span class="line"><span>│  CLI Interface (usenet)                                     │</span></span>
<span class="line"><span>│  ├─ Pure subcommand routing                                 │</span></span>
<span class="line"><span>│  ├─ Three-tier help system                                  │</span></span>
<span class="line"><span>│  └─ Rich zsh/bash completions                               │</span></span>
<span class="line"><span>├─────────────────────────────────────────────────────────────┤</span></span>
<span class="line"><span>│  Component Management                                       │</span></span>
<span class="line"><span>│  ├─ Storage: Hot-swappable JBOD                            │</span></span>
<span class="line"><span>│  ├─ Hardware: Universal GPU optimization                    │</span></span>
<span class="line"><span>│  ├─ Services: 19-service orchestration                     │</span></span>
<span class="line"><span>│  └─ Backup: Configuration management                       │</span></span>
<span class="line"><span>├─────────────────────────────────────────────────────────────┤</span></span>
<span class="line"><span>│  Service Layer (19 Services)                               │</span></span>
<span class="line"><span>│  ├─ Media: Jellyfin, Overseerr, YACReader, Tdarr          │</span></span>
<span class="line"><span>│  ├─ Automation: Sonarr, Radarr, Readarr, Bazarr, etc.     │</span></span>
<span class="line"><span>│  ├─ Downloads: SABnzbd, Transmission                       │</span></span>
<span class="line"><span>│  └─ Management: Portainer, Netdata                         │</span></span>
<span class="line"><span>├─────────────────────────────────────────────────────────────┤</span></span>
<span class="line"><span>│  Container Orchestration (Docker Compose)                  │</span></span>
<span class="line"><span>│  ├─ Base: docker-compose.yml                               │</span></span>
<span class="line"><span>│  ├─ Hardware: docker-compose.optimized.yml                 │</span></span>
<span class="line"><span>│  └─ Storage: docker-compose.storage.yml (dynamic)          │</span></span>
<span class="line"><span>├─────────────────────────────────────────────────────────────┤</span></span>
<span class="line"><span>│  Storage Layer                                              │</span></span>
<span class="line"><span>│  ├─ Hot-swappable JBOD drives                              │</span></span>
<span class="line"><span>│  ├─ Cross-platform exFAT support                           │</span></span>
<span class="line"><span>│  ├─ Cloud storage integration                               │</span></span>
<span class="line"><span>│  └─ Network storage (NFS/SMB)                              │</span></span>
<span class="line"><span>├─────────────────────────────────────────────────────────────┤</span></span>
<span class="line"><span>│  Hardware Layer                                             │</span></span>
<span class="line"><span>│  ├─ Universal GPU support (NVIDIA/AMD/Intel/Pi)            │</span></span>
<span class="line"><span>│  ├─ Automatic driver installation                          │</span></span>
<span class="line"><span>│  ├─ Performance profiling                                   │</span></span>
<span class="line"><span>│  └─ Real-time optimization                                  │</span></span>
<span class="line"><span>└─────────────────────────────────────────────────────────────┘</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="component-architecture" tabindex="-1">Component Architecture <a class="header-anchor" href="#component-architecture" aria-label="Permalink to &quot;Component Architecture&quot;">​</a></h2><h3 id="cli-design-pattern" tabindex="-1">CLI Design Pattern <a class="header-anchor" href="#cli-design-pattern" aria-label="Permalink to &quot;CLI Design Pattern&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Modern subcommand architecture</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usenet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">componen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Examples:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usenet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> storage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # Component: storage, Action: list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usenet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hardware</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> optimize</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # Component: hardware, Action: optimize  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usenet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # Component: services, Action: restart</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="component-responsibilities" tabindex="-1">Component Responsibilities <a class="header-anchor" href="#component-responsibilities" aria-label="Permalink to &quot;Component Responsibilities&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Component</th><th>Purpose</th><th>Key Features</th></tr></thead><tbody><tr><td><strong>Storage</strong></td><td>Hot-swappable JBOD management</td><td>Real-time detection, API sync, exFAT support</td></tr><tr><td><strong>Hardware</strong></td><td>GPU optimization &amp; drivers</td><td>Universal detection, auto-install, benchmarking</td></tr><tr><td><strong>Services</strong></td><td>19-service orchestration</td><td>Health monitoring, log access, API management</td></tr><tr><td><strong>Backup</strong></td><td>Configuration management</td><td>Metadata tracking, atomic operations, encryption</td></tr><tr><td><strong>Deploy</strong></td><td>Orchestrated deployment</td><td>Pre-flight checks, profile selection, validation</td></tr><tr><td><strong>Validate</strong></td><td>System health checks</td><td>Auto-fix, monitoring, troubleshooting</td></tr></tbody></table><h2 id="data-flow-architecture" tabindex="-1">Data Flow Architecture <a class="header-anchor" href="#data-flow-architecture" aria-label="Permalink to &quot;Data Flow Architecture&quot;">​</a></h2><h3 id="media-automation-pipeline" tabindex="-1">Media Automation Pipeline <a class="header-anchor" href="#media-automation-pipeline" aria-label="Permalink to &quot;Media Automation Pipeline&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────┐    ┌─────────────┐    ┌─────────────┐    ┌─────────────┐</span></span>
<span class="line"><span>│   Request   │    │   Search    │    │  Download   │    │   Process   │</span></span>
<span class="line"><span>│ (Overseerr) │───▶│ (Prowlarr)  │───▶│ (SABnzbd)   │───▶│   (Tdarr)   │</span></span>
<span class="line"><span>└─────────────┘    └─────────────┘    └─────────────┘    └─────────────┘</span></span>
<span class="line"><span>       │                   │                   │                   │</span></span>
<span class="line"><span>       ▼                   ▼                   ▼                   ▼</span></span>
<span class="line"><span>┌─────────────┐    ┌─────────────┐    ┌─────────────┐    ┌─────────────┐</span></span>
<span class="line"><span>│  Organize   │    │   Quality   │    │   Storage   │    │   Serve     │</span></span>
<span class="line"><span>│ (Sonarr/    │───▶│ (Recyclarr) │───▶│   (JBOD)    │───▶│ (Jellyfin)  │</span></span>
<span class="line"><span>│  Radarr)    │    │             │    │             │    │             │</span></span>
<span class="line"><span>└─────────────┘    └─────────────┘    └─────────────┘    └─────────────┘</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="storage-integration-flow" tabindex="-1">Storage Integration Flow <a class="header-anchor" href="#storage-integration-flow" aria-label="Permalink to &quot;Storage Integration Flow&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────┐    ┌─────────────┐    ┌─────────────┐</span></span>
<span class="line"><span>│    Drive    │    │  Discovery  │    │     API     │</span></span>
<span class="line"><span>│  Detection  │───▶│   &amp; Pool    │───▶│    Sync     │</span></span>
<span class="line"><span>│             │    │ Management  │    │             │</span></span>
<span class="line"><span>└─────────────┘    └─────────────┘    └─────────────┘</span></span>
<span class="line"><span>       │                   │                   │</span></span>
<span class="line"><span>       ▼                   ▼                   ▼</span></span>
<span class="line"><span>┌─────────────┐    ┌─────────────┐    ┌─────────────┐</span></span>
<span class="line"><span>│   Docker    │    │   Service   │    │   Health    │</span></span>
<span class="line"><span>│  Compose    │───▶│  Restart    │───▶│ Validation  │</span></span>
<span class="line"><span>│ Generation  │    │             │    │             │</span></span>
<span class="line"><span>└─────────────┘    └─────────────┘    └─────────────┘</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="file-system-architecture" tabindex="-1">File System Architecture <a class="header-anchor" href="#file-system-architecture" aria-label="Permalink to &quot;File System Architecture&quot;">​</a></h2><h3 id="project-structure" tabindex="-1">Project Structure <a class="header-anchor" href="#project-structure" aria-label="Permalink to &quot;Project Structure&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>usenet-media-stack/</span></span>
<span class="line"><span>├── usenet                  # Single entry point CLI</span></span>
<span class="line"><span>├── lib/                    # Component implementations</span></span>
<span class="line"><span>│   ├── commands/          # CLI command handlers</span></span>
<span class="line"><span>│   │   ├── storage.zsh    # Hot-swappable JBOD management</span></span>
<span class="line"><span>│   │   ├── hardware.zsh   # GPU optimization system</span></span>
<span class="line"><span>│   │   ├── backup.zsh     # Configuration backup/restore</span></span>
<span class="line"><span>│   │   ├── services.zsh   # 19-service management</span></span>
<span class="line"><span>│   │   ├── deploy.zsh     # Orchestrated deployment</span></span>
<span class="line"><span>│   │   └── validate.zsh   # System health validation</span></span>
<span class="line"><span>│   ├── core/             # Shared utilities</span></span>
<span class="line"><span>│   │   ├── init.zsh      # Configuration loading</span></span>
<span class="line"><span>│   │   ├── common.zsh    # Utilities and logging</span></span>
<span class="line"><span>│   │   └── stan-quality.zsh # Code quality framework</span></span>
<span class="line"><span>│   └── test/             # Testing framework</span></span>
<span class="line"><span>├── config/               # Service configurations (19 services)</span></span>
<span class="line"><span>├── completions/          # Rich CLI completions</span></span>
<span class="line"><span>├── docker-compose.yml    # Base service definitions</span></span>
<span class="line"><span>├── docker-compose.*.yml  # Generated optimizations</span></span>
<span class="line"><span>├── .env                  # All credentials (gitignored)</span></span>
<span class="line"><span>└── docs/                # Professional documentation</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="configuration-management" tabindex="-1">Configuration Management <a class="header-anchor" href="#configuration-management" aria-label="Permalink to &quot;Configuration Management&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Configuration Sources (Priority Order):</span></span>
<span class="line"><span>1. Command-line flags    (--profile dedicated)</span></span>
<span class="line"><span>2. Environment variables (.env file)</span></span>
<span class="line"><span>3. Configuration files   (config/*.conf)</span></span>
<span class="line"><span>4. Intelligent defaults  (hardware-based)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="network-architecture" tabindex="-1">Network Architecture <a class="header-anchor" href="#network-architecture" aria-label="Permalink to &quot;Network Architecture&quot;">​</a></h2><h3 id="service-exposure" tabindex="-1">Service Exposure <a class="header-anchor" href="#service-exposure" aria-label="Permalink to &quot;Service Exposure&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>External Access (Cloudflare Tunnel):</span></span>
<span class="line"><span>├── jellyfin.example.com → Jellyfin (8096)</span></span>
<span class="line"><span>├── requests.example.com → Overseerr (5055)</span></span>
<span class="line"><span>├── comics.example.com → YACReader (8082)</span></span>
<span class="line"><span>└── manage.example.com → Portainer (9000)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Internal Network (Docker Bridge):</span></span>
<span class="line"><span>├── Media Services     (8080-8099)</span></span>
<span class="line"><span>├── Automation Stack   (8900-8999, 6700-6799)</span></span>
<span class="line"><span>├── Management Tools   (9000-9999, 19999)</span></span>
<span class="line"><span>└── File Sharing      (445, 2049)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="security-model" tabindex="-1">Security Model <a class="header-anchor" href="#security-model" aria-label="Permalink to &quot;Security Model&quot;">​</a></h3><ul><li><strong>Zero exposed ports</strong> - All access via Cloudflare Tunnel</li><li><strong>API authentication</strong> - Unique keys for each service</li><li><strong>Container isolation</strong> - Services in dedicated network</li><li><strong>Credential management</strong> - Environment-based secrets</li></ul><h2 id="hardware-optimization-architecture" tabindex="-1">Hardware Optimization Architecture <a class="header-anchor" href="#hardware-optimization-architecture" aria-label="Permalink to &quot;Hardware Optimization Architecture&quot;">​</a></h2><h3 id="multi-platform-gpu-support" tabindex="-1">Multi-Platform GPU Support <a class="header-anchor" href="#multi-platform-gpu-support" aria-label="Permalink to &quot;Multi-Platform GPU Support&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GPU Detection &amp; Optimization:</span></span>
<span class="line"><span>├── NVIDIA RTX Series</span></span>
<span class="line"><span>│   ├── NVENC/NVDEC encoding</span></span>
<span class="line"><span>│   ├── CUDA acceleration</span></span>
<span class="line"><span>│   └── nvidia-docker2 integration</span></span>
<span class="line"><span>├── AMD RDNA/GCN Series  </span></span>
<span class="line"><span>│   ├── VAAPI acceleration</span></span>
<span class="line"><span>│   ├── AMF encoding</span></span>
<span class="line"><span>│   └── Mesa driver integration</span></span>
<span class="line"><span>├── Intel Arc/Iris</span></span>
<span class="line"><span>│   ├── QuickSync encoding</span></span>
<span class="line"><span>│   ├── VA-API support</span></span>
<span class="line"><span>│   └── Intel media drivers</span></span>
<span class="line"><span>└── Raspberry Pi</span></span>
<span class="line"><span>    ├── VideoCore GPU</span></span>
<span class="line"><span>    ├── Hardware decode</span></span>
<span class="line"><span>    └── GPU memory allocation</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="performance-profiles" tabindex="-1">Performance Profiles <a class="header-anchor" href="#performance-profiles" aria-label="Permalink to &quot;Performance Profiles&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Profile</th><th>Resources</th><th>Use Case</th><th>Transcoding</th></tr></thead><tbody><tr><td><strong>Light</strong></td><td>25% CPU, 4GB RAM</td><td>Development</td><td>Software only</td></tr><tr><td><strong>Balanced</strong></td><td>50% CPU, 8GB RAM</td><td>Home server</td><td>Hardware enabled</td></tr><tr><td><strong>High</strong></td><td>75% CPU, 16GB RAM</td><td>Media server</td><td>Optimized</td></tr><tr><td><strong>Dedicated</strong></td><td>100% CPU, All RAM</td><td>Appliance</td><td>Maximum</td></tr></tbody></table><h2 id="storage-architecture" tabindex="-1">Storage Architecture <a class="header-anchor" href="#storage-architecture" aria-label="Permalink to &quot;Storage Architecture&quot;">​</a></h2><h3 id="hot-swappable-jbod-design" tabindex="-1">Hot-Swappable JBOD Design <a class="header-anchor" href="#hot-swappable-jbod-design" aria-label="Permalink to &quot;Hot-Swappable JBOD Design&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Storage Pool Management:</span></span>
<span class="line"><span>├── Drive Discovery</span></span>
<span class="line"><span>│   ├── Local drives (HDD/SSD/NVMe)</span></span>
<span class="line"><span>│   ├── USB/External (hot-pluggable)</span></span>
<span class="line"><span>│   ├── Network storage (NFS/SMB)</span></span>
<span class="line"><span>│   └── Cloud mounts (rclone)</span></span>
<span class="line"><span>├── Pool Configuration</span></span>
<span class="line"><span>│   ├── Interactive selection</span></span>
<span class="line"><span>│   ├── Cross-platform compatibility</span></span>
<span class="line"><span>│   ├── Permission management</span></span>
<span class="line"><span>│   └── Mount point generation</span></span>
<span class="line"><span>└── Service Integration</span></span>
<span class="line"><span>    ├── Dynamic Docker Compose</span></span>
<span class="line"><span>    ├── API synchronization</span></span>
<span class="line"><span>    ├── Hot-swap workflows</span></span>
<span class="line"><span>    └── Zero-downtime updates</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="cross-platform-compatibility" tabindex="-1">Cross-Platform Compatibility <a class="header-anchor" href="#cross-platform-compatibility" aria-label="Permalink to &quot;Cross-Platform Compatibility&quot;">​</a></h3><ul><li><strong>ExFAT support</strong> - Works across Windows/macOS/Linux</li><li><strong>Portable drives</strong> - Camping trips and travel</li><li><strong>Cloud integration</strong> - Dropbox, OneDrive, Google Drive</li><li><strong>Network storage</strong> - NAS and server integration</li></ul><h2 id="service-integration-architecture" tabindex="-1">Service Integration Architecture <a class="header-anchor" href="#service-integration-architecture" aria-label="Permalink to &quot;Service Integration Architecture&quot;">​</a></h2><h3 id="api-synchronization" tabindex="-1">API Synchronization <a class="header-anchor" href="#api-synchronization" aria-label="Permalink to &quot;API Synchronization&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Storage Change Event:</span></span>
<span class="line"><span>├── Drive Detection</span></span>
<span class="line"><span>├── Pool Update</span></span>
<span class="line"><span>├── Docker Compose Generation</span></span>
<span class="line"><span>├── Service API Updates</span></span>
<span class="line"><span>│   ├── Sonarr: Root folders</span></span>
<span class="line"><span>│   ├── Radarr: Movie libraries  </span></span>
<span class="line"><span>│   ├── Jellyfin: Media libraries</span></span>
<span class="line"><span>│   └── Tdarr: Processing paths</span></span>
<span class="line"><span>└── Health Validation</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="service-dependencies" tabindex="-1">Service Dependencies <a class="header-anchor" href="#service-dependencies" aria-label="Permalink to &quot;Service Dependencies&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Dependency Graph:</span></span>
<span class="line"><span>├── Core Services (Always first)</span></span>
<span class="line"><span>│   ├── Prowlarr (indexer management)</span></span>
<span class="line"><span>│   └── SABnzbd (download client)</span></span>
<span class="line"><span>├── Automation Services</span></span>
<span class="line"><span>│   ├── Sonarr (depends: Prowlarr, SABnzbd)</span></span>
<span class="line"><span>│   ├── Radarr (depends: Prowlarr, SABnzbd)</span></span>
<span class="line"><span>│   └── Bazarr (depends: Sonarr, Radarr)</span></span>
<span class="line"><span>├── Media Services</span></span>
<span class="line"><span>│   ├── Jellyfin (depends: storage availability)</span></span>
<span class="line"><span>│   └── Tdarr (depends: Jellyfin, storage)</span></span>
<span class="line"><span>└── Management Services</span></span>
<span class="line"><span>    ├── Overseerr (depends: Sonarr, Radarr)</span></span>
<span class="line"><span>    └── Recyclarr (depends: Sonarr, Radarr)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="quality-assurance-architecture" tabindex="-1">Quality Assurance Architecture <a class="header-anchor" href="#quality-assurance-architecture" aria-label="Permalink to &quot;Quality Assurance Architecture&quot;">​</a></h2><h3 id="testing-framework" tabindex="-1">Testing Framework <a class="header-anchor" href="#testing-framework" aria-label="Permalink to &quot;Testing Framework&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quality Gates:</span></span>
<span class="line"><span>├── Code Quality (Stan&#39;s Standards)</span></span>
<span class="line"><span>│   ├── 80-character lines</span></span>
<span class="line"><span>│   ├── Function contracts</span></span>
<span class="line"><span>│   ├── Error handling</span></span>
<span class="line"><span>│   └── Documentation</span></span>
<span class="line"><span>├── Functionality Testing</span></span>
<span class="line"><span>│   ├── Unit tests (component level)</span></span>
<span class="line"><span>│   ├── Integration tests (workflow level)</span></span>
<span class="line"><span>│   ├── System tests (full stack)</span></span>
<span class="line"><span>│   └── Regression tests (change validation)</span></span>
<span class="line"><span>└── User Experience Testing</span></span>
<span class="line"><span>    ├── CLI usability</span></span>
<span class="line"><span>    ├── Error message clarity</span></span>
<span class="line"><span>    ├── Help system completeness</span></span>
<span class="line"><span>    └── Performance benchmarks</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="validation-system" tabindex="-1">Validation System <a class="header-anchor" href="#validation-system" aria-label="Permalink to &quot;Validation System&quot;">​</a></h3><ul><li><strong>Pre-deployment checks</strong> - System requirements, configuration</li><li><strong>Runtime monitoring</strong> - Service health, resource usage</li><li><strong>Auto-fix capabilities</strong> - Common issues resolution</li><li><strong>Comprehensive reporting</strong> - JSON exports, troubleshooting</li></ul><h2 id="extensibility-architecture" tabindex="-1">Extensibility Architecture <a class="header-anchor" href="#extensibility-architecture" aria-label="Permalink to &quot;Extensibility Architecture&quot;">​</a></h2><h3 id="adding-new-services" tabindex="-1">Adding New Services <a class="header-anchor" href="#adding-new-services" aria-label="Permalink to &quot;Adding New Services&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add service to docker-compose.yml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">services:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  new-service:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    image:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-service:latest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ports:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;8888:8080&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    volumes:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./config/new-service:/config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    environment:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> API_KEY=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${NEW_SERVICE_API_KEY}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Register with CLI system</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usenet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-service</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --category</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> custom</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="custom-hardware-support" tabindex="-1">Custom Hardware Support <a class="header-anchor" href="#custom-hardware-support" aria-label="Permalink to &quot;Custom Hardware Support&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add hardware detection logic</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">detect_custom_hardware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Custom GPU detection</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lspci</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;custom gpu&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Custom GPU detected&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Register optimization profile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usenet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hardware</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> profile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> custom-gpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --transcoding-args</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-hwaccel custom&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --quality-settings</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> high</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="related-architecture-documentation" tabindex="-1">Related Architecture Documentation <a class="header-anchor" href="#related-architecture-documentation" aria-label="Permalink to &quot;Related Architecture Documentation&quot;">​</a></h2><ul><li><a href="./cli-design.html">CLI Design Patterns</a> - Command architecture deep dive</li><li><a href="./services.html">Service Architecture</a> - 19-service integration details</li><li><a href="./storage.html">Storage Architecture</a> - Hot-swappable JBOD implementation</li><li><a href="./hardware.html">Hardware Architecture</a> - Multi-platform GPU optimization</li><li><a href="./network.html">Network Architecture</a> - Security and connectivity design</li></ul>`,58)]))}const u=n(p,[["render",l]]);export{b as __pageData,u as default};

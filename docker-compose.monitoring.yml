# 📊 PROMETHEUS + GRAFANA: DOCKER SWARM MONITORING STACK
# Comprehensive monitoring for 13-node distributed cluster
# Replaces Netdata with modern, Swarm-aware monitoring
#
# MONITORING ARCHITECTURE:
# ┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
# │  Node Exporter  │    │   cAdvisor      │    │   Prometheus    │
# │  (All Nodes)    │───▶│  (All Nodes)    │───▶│  (Manager Only) │
# └─────────────────┘    └─────────────────┘    └─────────────────┘
#                                                         │
#                                                ┌────────▼────────┐
#                                                │    Grafana      │
#                                                │ (Beautiful UI)  │
#                                                └─────────────────┘
#
# FEATURES:
# • Service discovery across all Swarm nodes
# • Container and host metrics collection
# • Beautiful dashboards for cluster visualization
# • Alerting for service health and performance
# • Resource usage tracking per node and service
# • Network and storage performance monitoring

version: '3.8'

networks:
  monitoring:
    driver: overlay
    attachable: true
  traefik-public:
    external: true

services:
  # ================================
  # 📊 PROMETHEUS: METRICS COLLECTION ENGINE
  # Discovers and scrapes metrics from all Swarm nodes
  # ================================
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    
    networks:
      - monitoring
      - traefik-public
    
    ports:
      - "9090:9090"
    
    volumes:
      - prometheus-data:/prometheus
      - prometheus-config:/etc/prometheus
    
    configs:
      - source: prometheus-config
        target: /etc/prometheus/prometheus.yml
    
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          - node.labels.monitoring == true
      labels:
        # Traefik routing
        - traefik.enable=true
        - traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)
        - traefik.http.routers.prometheus.entrypoints=websecure
        - traefik.http.routers.prometheus.tls.certresolver=letsencrypt
        - traefik.http.services.prometheus.loadbalancer.server.port=9090
        
        # Basic auth for security
        - traefik.http.middlewares.prometheus-auth.basicauth.users=${PROMETHEUS_AUTH}
        - traefik.http.routers.prometheus.middlewares=prometheus-auth
      
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # 📈 GRAFANA: BEAUTIFUL DASHBOARDS
  # Visualizes metrics with stunning dashboards
  # ================================
  grafana:
    image: grafana/grafana:latest
    
    networks:
      - monitoring
      - traefik-public
    
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/swarm-overview.json
      
      # Security settings
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      
      # Performance settings
      - GF_DATABASE_WAL=true
      - GF_DATABASE_CACHE_MODE=private
    
    volumes:
      - grafana-data:/var/lib/grafana
      - grafana-dashboards:/var/lib/grafana/dashboards
      - grafana-config:/etc/grafana/provisioning
    
    configs:
      - source: grafana-datasources
        target: /etc/grafana/provisioning/datasources/prometheus.yml
      - source: grafana-dashboards-config
        target: /etc/grafana/provisioning/dashboards/dashboards.yml
    
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          - node.labels.monitoring == true
      labels:
        # Traefik routing
        - traefik.enable=true
        - traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)
        - traefik.http.routers.grafana.entrypoints=websecure
        - traefik.http.routers.grafana.tls.certresolver=letsencrypt
        - traefik.http.services.grafana.loadbalancer.server.port=3000
        
        # Security headers
        - traefik.http.middlewares.grafana-headers.headers.frameDeny=true
        - traefik.http.middlewares.grafana-headers.headers.contentTypeNosniff=true
        - traefik.http.routers.grafana.middlewares=grafana-headers
      
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # 🖥️ NODE EXPORTER: HOST METRICS
  # Deployed on EVERY node in the cluster
  # ================================
  node-exporter:
    image: prom/node-exporter:latest
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.textfile.directory=/var/lib/node_exporter/textfile_collector'
      - '--web.listen-address=:9100'
      - '--log.level=info'
    
    networks:
      - monitoring
    
    ports:
      - target: 9100
        published: 9100
        mode: host
    
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /var/lib/node_exporter/textfile_collector:/var/lib/node_exporter/textfile_collector:ro
    
    deploy:
      mode: global  # Deploy on EVERY node
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
      
      labels:
        - prometheus.io/scrape=true
        - prometheus.io/port=9100
        - prometheus.io/path=/metrics

  # ================================
  # 🐳 CADVISOR: CONTAINER METRICS
  # Monitors Docker containers on every node
  # ================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    command:
      - '--docker_only=true'
      - '--housekeeping_interval=30s'
      - '--max_housekeeping_interval=35s'
      - '--event_storage_event_limit=default=0'
      - '--event_storage_age_limit=default=0'
      - '--store_container_labels=false'
      - '--whitelisted_container_labels=io.kubernetes.container.name,io.kubernetes.pod.name,io.kubernetes.pod.namespace'
    
    networks:
      - monitoring
    
    ports:
      - target: 8080
        published: 8080
        mode: host
    
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    
    deploy:
      mode: global  # Deploy on EVERY node
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
      
      labels:
        - prometheus.io/scrape=true
        - prometheus.io/port=8080
        - prometheus.io/path=/metrics

  # ================================
  # 🚨 ALERTMANAGER: ALERTING SYSTEM
  # Handles alerts from Prometheus
  # ================================
  alertmanager:
    image: prom/alertmanager:latest
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alertmanager.${DOMAIN}'
      - '--log.level=info'
    
    networks:
      - monitoring
      - traefik-public
    
    ports:
      - "9093:9093"
    
    volumes:
      - alertmanager-data:/alertmanager
    
    configs:
      - source: alertmanager-config
        target: /etc/alertmanager/alertmanager.yml
    
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          - node.labels.monitoring == true
      labels:
        # Traefik routing
        - traefik.enable=true
        - traefik.http.routers.alertmanager.rule=Host(`alertmanager.${DOMAIN}`)
        - traefik.http.routers.alertmanager.entrypoints=websecure
        - traefik.http.routers.alertmanager.tls.certresolver=letsencrypt
        - traefik.http.services.alertmanager.loadbalancer.server.port=9093
        
        # Basic auth for security
        - traefik.http.middlewares.alertmanager-auth.basicauth.users=${PROMETHEUS_AUTH}
        - traefik.http.routers.alertmanager.middlewares=alertmanager-auth
      
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

# ================================
# 📁 VOLUMES: PERSISTENT STORAGE
# ================================
volumes:
  prometheus-data:
    driver: local
    driver_opts:
      type: nfs
      o: addr=${NFS_SERVER},nolock,soft,rw
      device: ":${NFS_PATH}/monitoring/prometheus"
  
  prometheus-config:
    driver: local
    driver_opts:
      type: nfs
      o: addr=${NFS_SERVER},nolock,soft,rw
      device: ":${NFS_PATH}/monitoring/prometheus/config"
  
  grafana-data:
    driver: local
    driver_opts:
      type: nfs
      o: addr=${NFS_SERVER},nolock,soft,rw
      device: ":${NFS_PATH}/monitoring/grafana"
  
  grafana-dashboards:
    driver: local
    driver_opts:
      type: nfs
      o: addr=${NFS_SERVER},nolock,soft,rw
      device: ":${NFS_PATH}/monitoring/grafana/dashboards"
  
  grafana-config:
    driver: local
    driver_opts:
      type: nfs
      o: addr=${NFS_SERVER},nolock,soft,rw
      device: ":${NFS_PATH}/monitoring/grafana/config"
  
  alertmanager-data:
    driver: local
    driver_opts:
      type: nfs
      o: addr=${NFS_SERVER},nolock,soft,rw
      device: ":${NFS_PATH}/monitoring/alertmanager"

# ================================
# ⚙️ CONFIGS: CONFIGURATION FILES
# ================================
configs:
  prometheus-config:
    external: true
    
  grafana-datasources:
    external: true
    
  grafana-dashboards-config:
    external: true
    
  alertmanager-config:
    external: true
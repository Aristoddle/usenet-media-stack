# 🔥 TRAEFIK + MULLVAD VPN: DOCKER SWARM EDITION
# This showcases modern container networking across a distributed cluster
#
# ARCHITECTURE: 13-Node Edge Computing Cluster
# ┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
# │  Raspberry Pi   │    │    Laptops      │    │  Manager Node   │
# │  (Worker Nodes) │    │ (Worker Nodes)  │    │   (Control)     │
# └─────────────────┘    └─────────────────┘    └─────────────────┘
#                                │
#                        ┌───────▼────────┐
#                        │ Traefik Router │ ← Service Discovery
#                        │ (Load Balancer)│ ← Automatic HTTPS
#                        └───────┬────────┘ ← VPN Integration
#                                │
#                    ┌───────────▼───────────┐
#                    │   Transmission VPN    │
#                    │ (Mullvad Protected)   │
#                    └───────────────────────┘
#
# SWARM NETWORKING FEATURES:
# • Automatic service discovery across all 13 nodes
# • Dynamic load balancing and health checking
# • Zero-downtime deployments with rolling updates
# • Secure overlay networking with encryption
# • VPN traffic isolation with internal service communication
#
# SECURITY MODEL:
# • BitTorrent traffic ONLY flows through Mullvad VPN
# • Internal *arr communication bypasses VPN (performance)
# • Automatic kill switch if VPN connection fails
# • TLS-encrypted overlay network between all nodes
# • Zero exposed ports on worker nodes

version: '3.8'

# 🌐 OVERLAY NETWORKS FOR DISTRIBUTED DEPLOYMENT
networks:
  # Traefik public network - spans all Swarm nodes
  traefik-public:
    driver: overlay
    attachable: true
    external: true
  
  # VPN isolated network for Transmission
  vpn-isolated:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"  # Encrypted overlay for VPN traffic
    
  # Internal service communication (bypasses VPN)
  internal-services:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"

services:
  # ================================
  # 🚦 TRAEFIK: THE MODERN EDGE ROUTER
  # Replaces nginx with automatic service discovery,
  # load balancing, and zero-config HTTPS across
  # the entire 13-node cluster
  # ================================
  traefik:
    image: traefik:v3.0
    command:
      # 📊 Dashboard and API
      - --api.dashboard=true
      - --api.insecure=true  # Only for internal access
      
      # 🐳 Docker Swarm Provider
      - --providers.docker=true
      - --providers.docker.swarmMode=true
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik-public
      
      # 🌐 Entry Points
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.transmission.address=:9092
      
      # 🔒 Automatic HTTPS with Let's Encrypt
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${CLOUDFLARE_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      
      # 📈 Metrics and Monitoring
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
      
      # 🔍 Logging
      - --log.level=INFO
      - --accesslog=true
      
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443  
        published: 443
        mode: host
      - target: 8080
        published: 8080
        mode: host  # Traefik dashboard
      - target: 9092
        published: 9092
        mode: host  # Transmission proxy
        
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-letsencrypt:/letsencrypt
      
    networks:
      - traefik-public
      - internal-services
      
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager  # Deploy on manager nodes only
      labels:
        - traefik.enable=true
        - traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)
        - traefik.http.routers.dashboard.tls.certresolver=letsencrypt
        - traefik.http.services.dashboard.loadbalancer.server.port=8080
        
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 128M

  # ================================
  # 🔒 MULLVAD VPN GATEWAY
  # Provides WireGuard tunnel exclusively for BitTorrent traffic
  # Uses modern VPN container with automatic reconnection
  # ================================
  mullvad-vpn:
    image: qmcgaw/gluetun:latest
    container_name: mullvad-vpn
    cap_add:
      - NET_ADMIN
    environment:
      # Mullvad Provider Configuration
      - VPN_SERVICE_PROVIDER=mullvad
      - VPN_TYPE=wireguard
      - WIREGUARD_PRIVATE_KEY=${MULLVAD_PRIVATE_KEY}
      - WIREGUARD_ADDRESSES=${MULLVAD_ADDRESSES}
      - SERVER_CITIES=${MULLVAD_CITY:-Stockholm}
      
      # Kill Switch and Security
      - FIREWALL=on
      - FIREWALL_VPN_INPUT_PORTS=${TRANSMISSION_PORT:-51413}
      - FIREWALL_INPUT_PORTS=9091  # Transmission web UI
      
      # DNS Configuration
      - DNS_ADDRESS=1.1.1.1,1.0.0.1
      - DNS_KEEP_NAMESERVER=on
      
      # Health Check URL
      - HEALTH_VPN_DURATION_INITIAL=30s
      - HEALTH_VPN_DURATION_ADDITION=5s
      
    networks:
      - vpn-isolated
      
    ports:
      - "51413:51413"      # BitTorrent port (exposed through VPN)
      - "51413:51413/udp"  # BitTorrent UDP
      
    volumes:
      - mullvad-data:/gluetun
      
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.vpn == true  # Deploy on VPN-capable nodes
      restart_policy:
        condition: unless-stopped
        delay: 10s
        max_attempts: 3
        
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/v1/openvpn/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================
  # 📦 TRANSMISSION: VPN-PROTECTED BITTORRENT
  # Runs in VPN network namespace for complete traffic isolation
  # All BitTorrent traffic flows through Mullvad VPN only
  # ================================
  transmission:
    image: lscr.io/linuxserver/transmission:latest
    depends_on:
      - mullvad-vpn
      
    # 🔒 CRITICAL: Shares network stack with VPN container
    network_mode: "service:mullvad-vpn"
    
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ:-UTC}
      - TRANSMISSION_WEB_HOME=/transmission-web-control/
      
      # Security Settings
      - TRANSMISSION_RPC_AUTHENTICATION_REQUIRED=true
      - TRANSMISSION_RPC_USERNAME=${TRANSMISSION_USER:-admin}
      - TRANSMISSION_RPC_PASSWORD=${TRANSMISSION_PASS:-secure123}
      - TRANSMISSION_RPC_WHITELIST_ENABLED=false
      - TRANSMISSION_RPC_HOST_WHITELIST_ENABLED=false
      
      # Performance Tuning for Distributed Environment
      - TRANSMISSION_CACHE_SIZE_MB=256
      - TRANSMISSION_MAX_PEERS_GLOBAL=3000
      - TRANSMISSION_PEER_LIMIT_PER_TORRENT=300
      - TRANSMISSION_DOWNLOAD_QUEUE_ENABLED=true
      - TRANSMISSION_DOWNLOAD_QUEUE_SIZE=10
      
      # Path Configuration
      - TRANSMISSION_DOWNLOAD_DIR=/downloads/complete
      - TRANSMISSION_INCOMPLETE_DIR=/downloads/incomplete
      - TRANSMISSION_WATCH_DIR=/watch
      
    volumes:
      - transmission-config:/config
      - transmission-downloads:/downloads
      - transmission-watch:/watch
      
    # 🏷️ TRAEFIK LABELS: Modern Service Discovery
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.storage == true  # Deploy on nodes with storage
      labels:
        # Enable Traefik
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        
        # HTTP Router for Web UI
        - traefik.http.routers.transmission.rule=Host(`transmission.${DOMAIN}`)
        - traefik.http.routers.transmission.entrypoints=websecure
        - traefik.http.routers.transmission.tls.certresolver=letsencrypt
        - traefik.http.services.transmission.loadbalancer.server.port=9091
        
        # Health Check
        - traefik.http.services.transmission.loadbalancer.healthcheck.path=/transmission/web/
        - traefik.http.services.transmission.loadbalancer.healthcheck.interval=30s
        
        # Rate Limiting for Security
        - traefik.http.middlewares.transmission-ratelimit.ratelimit.burst=100
        - traefik.http.routers.transmission.middlewares=transmission-ratelimit
        
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
          
      restart_policy:
        condition: unless-stopped
        delay: 30s
        max_attempts: 3

  # ================================
  # 🔗 TRANSMISSION PROXY SERVICE  
  # Enables internal *arr stack communication with VPN-protected Transmission
  # This is the magic that makes Swarm + VPN + Internal routing work
  # ================================
  transmission-proxy:
    image: nginx:alpine
    networks:
      - internal-services
      - traefik-public
      
    configs:
      - source: transmission-nginx-config
        target: /etc/nginx/nginx.conf
        
    deploy:
      mode: replicated
      replicas: 2  # Redundancy across multiple nodes
      placement:
        preferences:
          - spread: node.labels.region  # Spread across regions/device types
      labels:
        # Traefik labels for internal routing
        - traefik.enable=true
        - traefik.http.routers.transmission-internal.rule=Host(`transmission-internal.local`)
        - traefik.http.services.transmission-internal.loadbalancer.server.port=80
        
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

# ================================
# 🗂️ VOLUMES: DISTRIBUTED STORAGE
# ================================
volumes:
  traefik-letsencrypt:
    driver: local
    driver_opts:
      type: nfs
      o: addr=${NFS_SERVER},nolock,soft,rw
      device: ":${NFS_PATH}/traefik/letsencrypt"
      
  mullvad-data:
    driver: local
    driver_opts:
      type: nfs  
      o: addr=${NFS_SERVER},nolock,soft,rw
      device: ":${NFS_PATH}/mullvad"
      
  transmission-config:
    driver: local
    driver_opts:
      type: nfs
      o: addr=${NFS_SERVER},nolock,soft,rw
      device: ":${NFS_PATH}/transmission/config"
      
  transmission-downloads:
    driver: local
    driver_opts:
      type: nfs
      o: addr=${NFS_SERVER},nolock,soft,rw
      device: ":${NFS_PATH}/downloads"
      
  transmission-watch:
    driver: local
    driver_opts:
      type: nfs
      o: addr=${NFS_SERVER},nolock,soft,rw
      device: ":${NFS_PATH}/downloads/watch"

# ================================
# ⚙️ CONFIGS: NGINX PROXY CONFIGURATION
# ================================ 
configs:
  transmission-nginx-config:
    external: true
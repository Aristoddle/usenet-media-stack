# VPN-Protected BitTorrent Configuration
# This file extends the main docker-compose.yml with Mullvad VPN protection
# for Transmission only, while maintaining seamless arr stack communication.
#
# ARCHITECTURE:
# ┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
# │   Sonarr/Radarr │────│  Docker Network │────│  Transmission   │
# │   (Clearnet)    │    │   (Internal)    │    │  (VPN Protected)│
# └─────────────────┘    └─────────────────┘    └─────────────────┘
#                                                        │
#                                                ┌───────▼────────┐
#                                                │ Mullvad VPN    │
#                                                │ (WireGuard)    │
#                                                └────────────────┘
#
# SECURITY MODEL:
# • Transmission ONLY accessible through VPN tunnel
# • If VPN fails, Transmission automatically stops (kill switch)
# • Arr stack communicates with Transmission via internal Docker network
# • No BitTorrent traffic can leak to clearnet
# • Usenet traffic (SABnzbd) remains on clearnet for performance

services:
  # ================================
  # Mullvad VPN Container
  # Provides WireGuard tunnel for Transmission
  # ================================
  mullvad-vpn:
    image: ghcr.io/bubuntux/nordlynx:latest
    container_name: mullvad-vpn
    hostname: mullvad-vpn
    networks:
      - media_network
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      # Mullvad WireGuard Configuration
      - PRIVATE_KEY=${MULLVAD_PRIVATE_KEY}
      - ADDRESS=${MULLVAD_VPN_IP}
      - PUBLIC_KEY=${MULLVAD_PUBLIC_KEY}
      - ENDPOINT=${MULLVAD_ENDPOINT}
      - ALLOWED_IPS=0.0.0.0/0
      
      # Kill switch and DNS
      - KILLSWITCH=on
      - DNS=1.1.1.1,1.0.0.1
      
      # Network configuration
      - NET_LOCAL=192.168.0.0/16,172.16.0.0/12,10.0.0.0/8
      - RECONNECT=on
      
      # Debugging
      - DEBUG=off
      
    volumes:
      - /lib/modules:/lib/modules:ro
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "https://ipinfo.io/ip"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================ 
  # Transmission - VPN Protected BitTorrent
  # Routes ALL traffic through Mullvad VPN
  # ================================
  transmission-vpn:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission-vpn
    hostname: transmission-vpn
    
    # CRITICAL: Use VPN container's network stack
    network_mode: "service:mullvad-vpn"
    
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - TRANSMISSION_WEB_HOME=/transmission-web-control/
      
      # Security: Bind to VPN interface only
      - TRANSMISSION_BIND_ADDRESS_IPV4=0.0.0.0
      - TRANSMISSION_RPC_BIND_ADDRESS=0.0.0.0
      
      # Download/Upload settings
      - TRANSMISSION_DOWNLOAD_DIR=/downloads/complete
      - TRANSMISSION_INCOMPLETE_DIR=/downloads/incomplete
      - TRANSMISSION_WATCH_DIR=/watch
      
      # Security settings
      - TRANSMISSION_RPC_AUTHENTICATION_REQUIRED=true
      - TRANSMISSION_RPC_USERNAME=${TRANSMISSION_USER:-admin}
      - TRANSMISSION_RPC_PASSWORD=${TRANSMISSION_PASS:-secure123}
      - TRANSMISSION_RPC_WHITELIST_ENABLED=false
      
      # Performance settings
      - TRANSMISSION_CACHE_SIZE_MB=256
      - TRANSMISSION_MAX_PEERS_GLOBAL=3000
      - TRANSMISSION_PEER_LIMIT_GLOBAL=3000
      - TRANSMISSION_PEER_LIMIT_PER_TORRENT=300
      
    volumes:
      - transmission_config:/config
      - downloads_volume:/downloads
      - /home/joe/usenet/downloads/watch:/watch
      
    # IMPORTANT: No direct port mappings - access via VPN container
    # Port 9091 is accessible via mullvad-vpn container IP
    
    restart: unless-stopped
    
    depends_on:
      mullvad-vpn:
        condition: service_healthy
        
    # Health check ensures Transmission is accessible
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:9091/transmission/web/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
      
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ================================
  # Transmission Proxy Service
  # Provides internal network access to VPN-protected Transmission
  # Allows arr stack to communicate with Transmission
  # ================================
  transmission-proxy:
    image: nginx:alpine
    container_name: transmission-proxy
    hostname: transmission-proxy
    networks:
      - media_network
    ports:
      - "9092:80"  # External access via proxy
    volumes:
      - ./config/transmission-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      transmission-vpn:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

# ================================
# NETWORKS
# ================================
networks:
  media_network:
    external: true

# ================================
# VOLUMES
# ================================
volumes:
  transmission_config:
    external: true
  downloads_volume:
    external: true
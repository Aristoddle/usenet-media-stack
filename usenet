#!/usr/bin/env zsh
##############################################################################
# File: ./usenet
# Project: Usenet Media Stack
# Description: Unified entry point for all media stack operations
# Author: Joseph Lanzone <j3lanzone@gmail.com>
# Created: 2025-05-24
# Modified: 2025-05-24
# Version: 2.0.0
# License: MIT
#
# This is the single entry point for the Usenet Media Stack. All operations
# go through this script, which routes commands to appropriate handlers in
# the lib/ directory. This design ensures consistency, maintainability, and
# a clean user experience.
#
# Usage: usenet <command> [options]
# Try 'usenet help' for detailed information.
##############################################################################

##############################################################################
#                              INITIALIZATION                                #
##############################################################################

# Enable strict error handling
set -euo pipefail

# Get absolute path to script directory (handles symlinks)
SCRIPT_DIR="${0:A:h}"
readonly SCRIPT_DIR

# Ensure lib directory exists
if [[ ! -d "${SCRIPT_DIR}/lib" ]]; then
    print -u2 "ERROR: Cannot find lib/ directory"
    print -u2 "Installation may be corrupted. Please reinstall."
    exit 1
fi

##############################################################################
#                                CONSTANTS                                   #
##############################################################################

# Version information
readonly VERSION="2.0.0"
readonly BUILD_DATE="2025-05-24"

# Library paths
readonly LIB_DIR="${SCRIPT_DIR}/lib"
readonly COMMANDS_DIR="${LIB_DIR}/commands"
readonly CORE_DIR="${LIB_DIR}/core"

# Colors for output (if terminal supports it)
if [[ -t 1 ]] && [[ "${TERM:-}" != "dumb" ]]; then
    readonly COLOR_RED=$'\033[0;31m'
    readonly COLOR_GREEN=$'\033[0;32m'
    readonly COLOR_YELLOW=$'\033[0;33m'
    readonly COLOR_BLUE=$'\033[0;34m'
    readonly COLOR_RESET=$'\033[0m'
else
    readonly COLOR_RED=""
    readonly COLOR_GREEN=""
    readonly COLOR_YELLOW=""
    readonly COLOR_BLUE=""
    readonly COLOR_RESET=""
fi

##############################################################################
#                              HELP SYSTEM                                   #
##############################################################################

#=============================================================================
# Function: show_help
# Description: Display main help or command-specific help
#
# Shows comprehensive help information for the usenet command or specific
# subcommands. Uses beautiful formatting and provides examples.
#
# Arguments:
#   $1 - topic (optional)
#        Specific command to show help for. If omitted, shows main help.
#
# Returns:
#   0 - Always succeeds
#
# Example:
#   show_help
#   show_help setup
#=============================================================================
show_help() {
    local topic="${1:-main}"
    
    if [[ "$topic" == "main" ]]; then
        cat <<'HELP'
ðŸŽ¬ Usenet Media Stack v2.0

USAGE
    usenet <command> [options]

COMMANDS
    Setup & Deployment
        setup              Deploy and configure the complete stack
        update             Update all containers to latest versions
        
    Service Management
        status             Show health and status of all services
        start [service]    Start all services or specific service
        stop [service]     Stop all services or specific service
        restart [service]  Restart services
        logs [service]     View service logs
        
    Storage Management
        storage <action>   Manage JBOD storage pool
        
    Maintenance
        backup             Backup all configurations
        restore <file>     Restore from backup
        test               Run system tests
        validate           Pre-deployment validation
        
    Information
        help [command]     Show help for command
        version            Show version information

OPTIONS
    --verbose, -v      Show detailed output
    --quiet, -q        Suppress non-essential output
    --yes, -y          Assume yes to all prompts

EXAMPLES
    Deploy everything:
        $ usenet setup
        
    Check what's running:
        $ usenet status
        
    Add a new drive:
        $ usenet storage add /mnt/disk2
        
    View logs for debugging:
        $ usenet logs sonarr

DOCUMENTATION
    Complete guide: https://github.com/Aristoddle/usenet-media-stack
    Storage setup: See 'usenet help storage'
    
HELP
    else
        # Command-specific help
        local help_file="${LIB_DIR}/help/${topic}.txt"
        if [[ -f "$help_file" ]]; then
            cat "$help_file"
        else
            print -u2 "${COLOR_RED}No help available for: ${topic}${COLOR_RESET}"
            print -u2 "Try 'usenet help' for general help"
            return 1
        fi
    fi
}

#=============================================================================
# Function: show_version
# Description: Display version and system information
#
# Shows version number, build date, and detected system information
# to help with troubleshooting and compatibility checks.
#
# Arguments:
#   None
#
# Returns:
#   0 - Always succeeds
#
# Example:
#   show_version
#=============================================================================
show_version() {
    print "Usenet Media Stack"
    print "Version: ${VERSION}"
    print "Build Date: ${BUILD_DATE}"
    print "Platform: $(uname -s) $(uname -m)"
    print ""
    
    # Check for dependencies
    print "Components:"
    if command -v docker &>/dev/null; then
        local docker_version=$(docker --version 2>/dev/null | cut -d' ' -f3 | sed 's/,$//')
        print "  Docker: ${docker_version}"
    else
        print "  Docker: ${COLOR_RED}not installed${COLOR_RESET}"
    fi
    
    if docker compose version &>/dev/null 2>&1; then
        local compose_version=$(docker compose version | cut -d' ' -f4)
        print "  Compose: ${compose_version}"
    else
        print "  Compose: ${COLOR_RED}not installed${COLOR_RESET}"
    fi
}

##############################################################################
#                            COMMAND ROUTING                                 #
##############################################################################

#=============================================================================
# Function: route_command
# Description: Route commands to appropriate handlers
#
# Main command dispatcher that routes user commands to the appropriate
# handler scripts in the lib/commands/ directory. Handles special cases
# and shortcuts for common operations.
#
# Arguments:
#   $@ - All command line arguments
#
# Returns:
#   Exit code from the executed command
#
# Example:
#   route_command setup --verbose
#=============================================================================
route_command() {
    local cmd="${1:-help}"
    shift || true
    
    case "$cmd" in
        # Help system
        help|--help|-h)
            show_help "${1:-main}"
            ;;
            
        # Version
        version|--version|-v)
            show_version
            ;;
            
        # Setup and deployment
        setup|install|deploy)
            exec "${COMMANDS_DIR}/setup.zsh" "$@"
            ;;
            
        # Service management
        start|stop|restart|status|logs)
            exec "${COMMANDS_DIR}/manage.zsh" "$cmd" "$@"
            ;;
            
        manage)
            exec "${COMMANDS_DIR}/manage.zsh" "$@"
            ;;
            
        # Storage management
        storage)
            exec "${COMMANDS_DIR}/storage.zsh" "$@"
            ;;
            
        # Updates
        update|upgrade)
            exec "${COMMANDS_DIR}/manage.zsh" update "$@"
            ;;
            
        # Testing and validation
        test)
            exec "${COMMANDS_DIR}/test.zsh" "$@"
            ;;
            
        validate|check)
            exec "${COMMANDS_DIR}/validate.zsh" "$@"
            ;;
            
        # Backup and restore
        backup)
            exec "${COMMANDS_DIR}/manage.zsh" backup "$@"
            ;;
            
        restore)
            exec "${COMMANDS_DIR}/backup.zsh" restore "$@"
            ;;
            
        # Unknown command
        *)
            print -u2 "${COLOR_RED}Error: Unknown command '${cmd}'${COLOR_RESET}"
            print -u2 "Try 'usenet help' for available commands"
            exit 1
            ;;
    esac
}

##############################################################################
#                              MAIN EXECUTION                                #
##############################################################################

# Ensure we're not running as root unless explicitly allowed
if [[ $EUID -eq 0 ]] && [[ "${ALLOW_ROOT:-}" != "true" ]]; then
    print -u2 "${COLOR_RED}Error: Do not run as root${COLOR_RESET}"
    print -u2 "Docker will request sudo when needed"
    exit 1
fi

# Route the command
route_command "$@"

# vim: set ts=4 sw=4 et tw=80:
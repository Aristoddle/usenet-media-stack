#!/usr/bin/env zsh
##############################################################################
# File: ./usenet
# Project: Usenet Media Stack
# Description: Unified entry point for all media stack operations
# Author: Joseph Lanzone <mailto:j3lanzone@gmail.com>
# Created: 2025-05-24
# Modified: 2025-05-24
# Version: 1.0.0
# License: MIT
#
# Dedicated to Stan Eisenstat, who taught us that good code explains itself.
#
# This is the single entry point for the Usenet Media Stack. All operations
# go through this script, which routes commands to appropriate handlers in
# the lib/ directory. This design ensures consistency, maintainability, and
# a clean user experience.
#
# Design principles (The Stan Way):
# - One entry point, one responsibility
# - Clear command routing, no magic
# - Helpful error messages for humans
# - No clever tricks, just clarity
#
# Usage: usenet <command> [options]
# Try 'usenet help' for detailed information.
##############################################################################

##############################################################################
#                              INITIALIZATION                                #
##############################################################################

# Enable strict error handling
set -euo pipefail

# Get absolute path to script directory (handles symlinks)
SCRIPT_DIR="${0:A:h}"
readonly SCRIPT_DIR

# Ensure lib directory exists
if [[ ! -d "${SCRIPT_DIR}/lib" ]]; then
    print -u2 "ERROR: Cannot find lib/ directory"
    print -u2 "Installation may be corrupted. Please reinstall."
    exit 1
fi

# Load core functions and configuration
source "${SCRIPT_DIR}/lib/core/common.zsh" || {
    print -u2 "ERROR: Cannot load common.zsh"
    exit 1
}

##############################################################################
#                           GLOBAL CONFIGURATION                             #
##############################################################################

# Global flags (set by argument parser)
typeset -g VERBOSE=false
typeset -g DRY_RUN=false
typeset -g QUIET=false
typeset -g PROFILE=""

# Directories
readonly LIB_DIR="${SCRIPT_DIR}/lib"
readonly COMMANDS_DIR="${LIB_DIR}/commands"

##############################################################################
#                              HELP SYSTEM                                   #
##############################################################################

#=============================================================================
# Function: show_version
# Description: Display version information
#=============================================================================
show_version() {
    print "ðŸŽ¬ ${COLOR_GREEN}Usenet Media Stack${COLOR_RESET} v1.0.0"
    print ""
    print "Hot-swappable JBOD media automation with intelligent deployment"
    print "Built for portable media libraries and cross-platform compatibility"
    print ""
    print "Project: https://github.com/Aristoddle/usenet-media-stack"
    print "License: MIT"
}

#=============================================================================
# Function: show_main_help
# Description: Display main help screen
#=============================================================================
show_main_help() {
    print "ðŸŽ¬ ${COLOR_GREEN}Usenet Media Stack${COLOR_RESET} v1.0.0"
    print ""
    print "${COLOR_YELLOW}USAGE${COLOR_RESET}"
    print "    usenet <command> [options]"
    print "    usenet <command> --help        # Command-specific help"
    print ""
    print "${COLOR_YELLOW}PRIMARY WORKFLOWS${COLOR_RESET}"
    print "    ${COLOR_GREEN}deploy${COLOR_RESET}                 Interactive full deployment"
    print "    ${COLOR_GREEN}deploy --auto${COLOR_RESET}          Auto-detect and deploy everything"
    print "    ${COLOR_GREEN}deploy --profile <name>${COLOR_RESET} Deploy with specific performance profile"
    print ""
    print "${COLOR_YELLOW}COMPONENT MANAGEMENT${COLOR_RESET}"
    print "    ${COLOR_GREEN}storage${COLOR_RESET} <action>       JBOD storage pool management"
    print "    ${COLOR_GREEN}hardware${COLOR_RESET} <action>      Hardware optimization and GPU acceleration"
    print "    ${COLOR_GREEN}services${COLOR_RESET} <action>      Service management (start/stop/logs/status)"
    print ""
    print "${COLOR_YELLOW}SYSTEM OPERATIONS${COLOR_RESET}"
    print "    ${COLOR_GREEN}backup${COLOR_RESET} <action>        Configuration backup and restore"
    print "    ${COLOR_GREEN}tunnel${COLOR_RESET} <action>        Cloudflare tunnel management"
    print "    ${COLOR_GREEN}validate${COLOR_RESET}               Pre-flight system checks"
    print ""
    print "${COLOR_YELLOW}GLOBAL OPTIONS${COLOR_RESET}"
    print "    --verbose, -v          Show detailed output"
    print "    --dry-run, -n          Show what would be done without executing"
    print "    --quiet, -q            Suppress non-essential output"
    print "    --profile <name>       Use specific performance profile"
    print "    --help, -h             Show help information"
    print "    --version              Show version information"
    print ""
    print "${COLOR_YELLOW}EXAMPLES${COLOR_RESET}"
    print "    Complete deployment:"
    print "        ${COLOR_CYAN}usenet deploy${COLOR_RESET}"
    print ""
    print "    Auto-configure everything:"
    print "        ${COLOR_CYAN}usenet deploy --auto --profile balanced${COLOR_RESET}"
    print ""
    print "    Add a drive to storage pool:"
    print "        ${COLOR_CYAN}usenet storage add /media/user/Movies_4TB${COLOR_RESET}"
    print ""
    print "    Check service status:"
    print "        ${COLOR_CYAN}usenet services status${COLOR_RESET}"
    print ""
    print "${COLOR_YELLOW}GET STARTED${COLOR_RESET}"
    print "    Run ${COLOR_GREEN}usenet deploy${COLOR_RESET} for interactive setup"
    print "    Run ${COLOR_GREEN}usenet <command> --help${COLOR_RESET} for command-specific help"
}

##############################################################################
#                           COMMAND ROUTING                                  #
##############################################################################

#=============================================================================
# Function: route_command
# Description: Route to appropriate command handler
#
# Arguments:
#   $1 - Command name
#   $@ - Command arguments
#=============================================================================
route_command() {
    local command="$1"
    shift
    
    case "$command" in
        # Primary workflows
        deploy)
            if [[ -x "${COMMANDS_DIR}/deploy.zsh" ]]; then
                exec "${COMMANDS_DIR}/deploy.zsh" "$@"
            else
                error "Deploy command not implemented yet"
                error "Use 'usenet setup' for now (legacy)"
                exit 1
            fi
            ;;
            
        # Component management
        storage)
            if [[ -x "${COMMANDS_DIR}/storage.zsh" ]]; then
                exec "${COMMANDS_DIR}/storage.zsh" "$@"
            else
                error "Storage command not found"
                exit 1
            fi
            ;;
            
        hardware)
            if [[ -x "${COMMANDS_DIR}/hardware.zsh" ]]; then
                exec "${COMMANDS_DIR}/hardware.zsh" "$@"
            else
                error "Hardware command not found"
                exit 1
            fi
            ;;
            
        services)
            if [[ -x "${COMMANDS_DIR}/services.zsh" ]]; then
                exec "${COMMANDS_DIR}/services.zsh" "$@"
            else
                # Fallback to manage.zsh for now
                if [[ -x "${COMMANDS_DIR}/manage.zsh" ]]; then
                    warning "Using legacy manage.zsh - services.zsh not yet implemented"
                    exec "${COMMANDS_DIR}/manage.zsh" "$@"
                else
                    error "Services command not found"
                    exit 1
                fi
            fi
            ;;
            
        # System operations
        backup)
            if [[ -x "${COMMANDS_DIR}/backup.zsh" ]]; then
                exec "${COMMANDS_DIR}/backup.zsh" "$@"
            else
                error "Backup command not found"
                exit 1
            fi
            ;;
            
        tunnel)
            if [[ -x "${COMMANDS_DIR}/cloudflare.zsh" ]]; then
                exec "${COMMANDS_DIR}/cloudflare.zsh" "$@"
            else
                error "Tunnel command not found"
                exit 1
            fi
            ;;
            
        validate)
            if [[ -x "${COMMANDS_DIR}/validate.zsh" ]]; then
                exec "${COMMANDS_DIR}/validate.zsh" "$@"
            else
                error "Validate command not found"
                exit 1
            fi
            ;;
            
        # Legacy support (with deprecation warnings)
        setup|install)
            warning "Legacy command '$command' - use 'usenet deploy' instead"
            if [[ -x "${COMMANDS_DIR}/setup.zsh" ]]; then
                exec "${COMMANDS_DIR}/setup.zsh" "$@"
            else
                error "Setup command not found"
                exit 1
            fi
            ;;
            
        start|stop|restart|status|logs|update|upgrade)
            warning "Legacy command '$command' - use 'usenet services $command' instead"
            if [[ -x "${COMMANDS_DIR}/manage.zsh" ]]; then
                exec "${COMMANDS_DIR}/manage.zsh" "$command" "$@"
            else
                error "Management command not found"
                exit 1
            fi
            ;;
            
        test)
            if [[ -x "${COMMANDS_DIR}/test.zsh" ]]; then
                exec "${COMMANDS_DIR}/test.zsh" "$@"
            else
                error "Test command not found"
                exit 1
            fi
            ;;
            
        # Legacy flag support (backward compatibility)
        --storage)
            warning "Legacy flag '--storage' - use 'usenet storage' instead"
            route_command storage "$@"
            ;;
            
        --hardware)
            warning "Legacy flag '--hardware' - use 'usenet hardware' instead" 
            route_command hardware "$@"
            ;;
            
        --backup)
            warning "Legacy flag '--backup' - use 'usenet backup' instead"
            route_command backup "$@"
            ;;
            
        --tunnel|--cloudflare)
            warning "Legacy flag '$command' - use 'usenet tunnel' instead"
            route_command tunnel "$@"
            ;;
            
        # Help and version
        help|--help|-h)
            show_main_help
            ;;
            
        version|--version)
            show_version
            ;;
            
        # Unknown command
        *)
            error "Unknown command: $command"
            print -u2 ""
            print -u2 "Available commands:"
            print -u2 "  deploy, storage, hardware, services, backup, tunnel, validate"
            print -u2 ""
            print -u2 "Run 'usenet --help' for more information"
            exit 1
            ;;
    esac
}

##############################################################################
#                           ARGUMENT PARSING                                 #
##############################################################################

#=============================================================================
# Function: parse_global_flags
# Description: Parse global flags that apply to all commands
#
# Arguments:
#   $@ - All command line arguments
#
# Returns:
#   Remaining arguments after global flags are removed
#=============================================================================
parse_global_flags() {
    local args=()
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --verbose|-v)
                VERBOSE=true
                ;;
            --dry-run|-n)
                DRY_RUN=true
                ;;
            --quiet|-q)
                QUIET=true
                ;;
            --profile)
                if [[ -n "${2:-}" ]]; then
                    PROFILE="$2"
                    shift
                else
                    error "--profile requires a value"
                    exit 1
                fi
                ;;
            --profile=*)
                PROFILE="${1#--profile=}"
                ;;
            --help|-h)
                # Don't consume help flag here - let it be processed later
                args+=("help")
                ;;
            --version)
                show_version
                exit 0
                ;;
            --)
                # End of global flags
                shift
                args+=("$@")
                break
                ;;
            -*)
                # Unknown global flag - might be command-specific
                args+=("$1")
                ;;
            *)
                # Not a flag - start of command
                args+=("$@")
                break
                ;;
        esac
        shift
    done
    
    # Export global flags as environment variables for commands
    export USENET_VERBOSE="$VERBOSE"
    export USENET_DRY_RUN="$DRY_RUN" 
    export USENET_QUIET="$QUIET"
    export USENET_PROFILE="$PROFILE"
    
    printf '%s\n' "${args[@]}"
}

##############################################################################
#                              MAIN EXECUTION                                #
##############################################################################

#=============================================================================
# Function: main
# Description: Main entry point
#
# Arguments:
#   $@ - Command line arguments
#=============================================================================
main() {
    # Parse global flags first
    local remaining_args=()
    local temp_file=$(mktemp)
    parse_global_flags "$@" > "$temp_file"
    
    while IFS= read -r line; do
        remaining_args+=("$line")
    done < "$temp_file"
    rm -f "$temp_file"
    
    # If no arguments, show help
    if [[ ${#remaining_args[@]} -eq 0 ]]; then
        show_main_help
        exit 0
    fi
    
    # Route to appropriate command
    route_command "${remaining_args[@]}"
}

# Ensure we're not running as root unless explicitly allowed
if [[ $EUID -eq 0 ]] && [[ "${ALLOW_ROOT:-}" != "true" ]]; then
    print -u2 "${COLOR_RED}ERROR: Running as root is not recommended${COLOR_RESET}"
    print -u2 "If you really need to run as root, set ALLOW_ROOT=true"
    exit 1
fi

# Run main function
main "$@"

# vim: set ts=4 sw=4 et tw=80:
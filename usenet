#!/usr/bin/env zsh
##############################################################################
# File: ./usenet
# Project: Usenet Media Stack
# Description: Unified entry point for all media stack operations
# Author: Joseph Lanzone <mailto:j3lanzone@gmail.com>
# Created: 2025-05-24
# Modified: 2025-05-24
# Version: 1.0.0
# License: MIT
#
# Dedicated to Stan Eisenstat, who taught us that good code explains itself.
#
# This implements a pure subcommand architecture following pyenv's successful
# pattern. All operations use the format: usenet <command> [action] [options]
#
# Design principles (The Stan Way + Pyenv Pattern):
# - Pure subcommand routing, no flag-based commands
# - Consistent action verbs across all components
# - Auto-help when required arguments missing
# - Clear error messages with suggested corrections
#
# Usage: usenet <command> [action] [options]
# Try 'usenet help' for detailed information.
##############################################################################

##############################################################################
#                              INITIALIZATION                                #
##############################################################################

# Enable strict error handling
set -euo pipefail

# Get absolute path to script directory (handles symlinks)
SCRIPT_DIR="${0:A:h}"
readonly SCRIPT_DIR

# Ensure lib directory exists
if [[ ! -d "${SCRIPT_DIR}/lib" ]]; then
    print -u2 "ERROR: Cannot find lib/ directory"
    print -u2 "Installation may be corrupted. Please reinstall."
    exit 1
fi

# Load core functions and configuration
source "${SCRIPT_DIR}/lib/core/common.zsh" || {
    print -u2 "ERROR: Cannot load common.zsh"
    exit 1
}

##############################################################################
#                           GLOBAL CONFIGURATION                             #
##############################################################################

# Global flags (set by argument parser)
typeset -g VERBOSE=false
typeset -g DRY_RUN=false
typeset -g QUIET=false
typeset -g PROFILE=""

# Directories
readonly LIB_DIR="${SCRIPT_DIR}/lib"
readonly COMMANDS_DIR="${LIB_DIR}/commands"

##############################################################################
#                              HELP SYSTEM                                   #
##############################################################################

#=============================================================================
# Function: show_version
# Description: Display version information
#=============================================================================
show_version() {
    print "ðŸŽ¬ ${COLOR_GREEN}Usenet Media Stack${COLOR_RESET} v1.0.0"
    print ""
    print "Hot-swappable JBOD media automation with intelligent deployment"
    print "Built for portable media libraries and cross-platform compatibility"
    print ""
    print "Project: https://github.com/Aristoddle/usenet-media-stack"
    print "License: MIT"
}

#=============================================================================
# Function: show_main_help
# Description: Display main help screen (pyenv-style)
#=============================================================================
show_main_help() {
    print "ðŸŽ¬ ${COLOR_GREEN}Usenet Media Stack${COLOR_RESET} v1.0.0"
    print ""
    print "${COLOR_YELLOW}USAGE${COLOR_RESET}"
    print "    usenet <command> [<args>]"
    print ""
    print "${COLOR_YELLOW}PRIMARY WORKFLOWS${COLOR_RESET}"
    print "    ${COLOR_GREEN}deploy${COLOR_RESET}                 Interactive full deployment"
    print "    ${COLOR_GREEN}validate${COLOR_RESET}               Pre-flight system checks"
    print ""
    print "${COLOR_YELLOW}COMPONENT MANAGEMENT${COLOR_RESET}"
    print "    ${COLOR_GREEN}storage${COLOR_RESET}                JBOD storage pool management"
    print "    ${COLOR_GREEN}hardware${COLOR_RESET}               Hardware optimization and GPU acceleration"
    print "    ${COLOR_GREEN}services${COLOR_RESET}               Service management (start/stop/logs/status)"
    print "    ${COLOR_GREEN}backup${COLOR_RESET}                 Configuration backup and restore"
    print "    ${COLOR_GREEN}tunnel${COLOR_RESET}                 Cloudflare tunnel management"
    print ""
    print "${COLOR_YELLOW}GLOBAL OPTIONS${COLOR_RESET}"
    print "    --verbose, -v          Show detailed output"
    print "    --dry-run, -n          Show what would be done without executing"
    print "    --quiet, -q            Suppress non-essential output"
    print "    --profile <name>       Use specific performance profile"
    print "    --version              Show version information"
    print ""
    print "${COLOR_YELLOW}EXAMPLES${COLOR_RESET}"
    print "    Complete deployment:"
    print "        ${COLOR_CYAN}usenet deploy${COLOR_RESET}"
    print ""
    print "    List available drives:"
    print "        ${COLOR_CYAN}usenet storage list${COLOR_RESET}"
    print ""
    print "    Add a drive to storage pool:"
    print "        ${COLOR_CYAN}usenet storage add /media/user/Movies_4TB${COLOR_RESET}"
    print ""
    print "    Check hardware capabilities:"
    print "        ${COLOR_CYAN}usenet hardware list${COLOR_RESET}"
    print ""
    print "    Show service status:"
    print "        ${COLOR_CYAN}usenet services list${COLOR_RESET}"
    print ""
    print "${COLOR_YELLOW}GET STARTED${COLOR_RESET}"
    print "    Run ${COLOR_GREEN}usenet deploy${COLOR_RESET} for interactive setup"
    print "    Run ${COLOR_GREEN}usenet help <command>${COLOR_RESET} for command-specific help"
    print ""
    print "See 'usenet help <command>' for information on a specific command."
}

#=============================================================================
# Function: show_command_help
# Description: Display help for a specific command
#
# Arguments:
#   $1 - Command name
#=============================================================================
show_command_help() {
    local command="$1"
    
    case "$command" in
        storage)
            print "${COLOR_GREEN}usenet storage${COLOR_RESET} - JBOD storage pool management"
            print ""
            print "${COLOR_YELLOW}USAGE${COLOR_RESET}"
            print "    usenet storage <action> [options]"
            print ""
            print "${COLOR_YELLOW}ACTIONS${COLOR_RESET}"
            print "    ${COLOR_GREEN}list${COLOR_RESET}                   List all available drives"
            print "    ${COLOR_GREEN}status${COLOR_RESET}                 Show current storage pool configuration"
            print "    ${COLOR_GREEN}add${COLOR_RESET} <path>             Add drive to storage pool"
            print "    ${COLOR_GREEN}remove${COLOR_RESET} <path>          Remove drive from storage pool"
            print "    ${COLOR_GREEN}sync${COLOR_RESET}                   Update service APIs with current pool"
            print ""
            print "${COLOR_YELLOW}EXAMPLES${COLOR_RESET}"
            print "    List all drives:"
            print "        ${COLOR_CYAN}usenet storage list${COLOR_RESET}"
            print ""
            print "    Add a drive:"
            print "        ${COLOR_CYAN}usenet storage add /media/user/Movies_4TB${COLOR_RESET}"
            ;;
        hardware)
            print "${COLOR_GREEN}usenet hardware${COLOR_RESET} - Hardware optimization and GPU acceleration"
            print ""
            print "${COLOR_YELLOW}USAGE${COLOR_RESET}"
            print "    usenet hardware <action> [options]"
            print ""
            print "${COLOR_YELLOW}ACTIONS${COLOR_RESET}"
            print "    ${COLOR_GREEN}list${COLOR_RESET}                   Show hardware capabilities"
            print "    ${COLOR_GREEN}configure${COLOR_RESET}              Interactive resource allocation"
            print "    ${COLOR_GREEN}install-drivers${COLOR_RESET}        Install GPU drivers and acceleration"
            print "    ${COLOR_GREEN}optimize${COLOR_RESET} [--auto]      Generate optimized configurations"
            print ""
            print "${COLOR_YELLOW}EXAMPLES${COLOR_RESET}"
            print "    Check hardware:"
            print "        ${COLOR_CYAN}usenet hardware list${COLOR_RESET}"
            print ""
            print "    Auto-optimize:"
            print "        ${COLOR_CYAN}usenet hardware optimize --auto${COLOR_RESET}"
            ;;
        services)
            print "${COLOR_GREEN}usenet services${COLOR_RESET} - Service management"
            print ""
            print "${COLOR_YELLOW}USAGE${COLOR_RESET}"
            print "    usenet services <action> [service]"
            print ""
            print "${COLOR_YELLOW}ACTIONS${COLOR_RESET}"
            print "    ${COLOR_GREEN}list${COLOR_RESET}                   Show all service health"
            print "    ${COLOR_GREEN}start${COLOR_RESET} [service]        Start all services or specific service"
            print "    ${COLOR_GREEN}stop${COLOR_RESET} [service]         Stop all services or specific service"
            print "    ${COLOR_GREEN}restart${COLOR_RESET} [service]      Restart services"
            print "    ${COLOR_GREEN}logs${COLOR_RESET} <service>         View service logs"
            print "    ${COLOR_GREEN}sync${COLOR_RESET}                   Update all service APIs"
            ;;
        backup)
            print "${COLOR_GREEN}usenet backup${COLOR_RESET} - Configuration backup and restore"
            print ""
            print "${COLOR_YELLOW}USAGE${COLOR_RESET}"
            print "    usenet backup <action> [options]"
            print ""
            print "${COLOR_YELLOW}ACTIONS${COLOR_RESET}"
            print "    ${COLOR_GREEN}list${COLOR_RESET}                   List available backups"
            print "    ${COLOR_GREEN}create${COLOR_RESET} [path]          Create backup (default: auto-generated path)"
            print "    ${COLOR_GREEN}show${COLOR_RESET} <backup>          Show backup contents"
            print "    ${COLOR_GREEN}restore${COLOR_RESET} <backup>       Restore from backup"
            ;;
        deploy)
            print "${COLOR_GREEN}usenet deploy${COLOR_RESET} - Interactive deployment"
            print ""
            print "${COLOR_YELLOW}USAGE${COLOR_RESET}"
            print "    usenet deploy [options]"
            print ""
            print "${COLOR_YELLOW}OPTIONS${COLOR_RESET}"
            print "    --auto                 Auto-detect and configure everything"
            print "    --profile <name>       Use specific performance profile"
            print "    --storage-only         Configure storage only"
            print "    --hardware-only        Configure hardware only"
            ;;
        *)
            error "Unknown command: $command"
            print -u2 "Run 'usenet help' for a list of available commands"
            return 1
            ;;
    esac
}

##############################################################################
#                           COMMAND ROUTING                                  #
##############################################################################

#=============================================================================
# Function: route_command
# Description: Route to appropriate command handler (pure subcommand)
#
# Arguments:
#   $1 - Command name
#   $@ - Command arguments
#=============================================================================
route_command() {
    local command="$1"
    shift
    
    case "$command" in
        # Primary workflows
        deploy)
            if [[ -x "${COMMANDS_DIR}/deploy.zsh" ]]; then
                exec "${COMMANDS_DIR}/deploy.zsh" "$@"
            else
                error "Deploy command not implemented yet"
                error "Use 'usenet setup' for now (legacy fallback)"
                if [[ -x "${COMMANDS_DIR}/setup.zsh" ]]; then
                    exec "${COMMANDS_DIR}/setup.zsh" "$@"
                fi
                exit 1
            fi
            ;;
            
        validate)
            if [[ -x "${COMMANDS_DIR}/validate.zsh" ]]; then
                exec "${COMMANDS_DIR}/validate.zsh" "$@"
            else
                error "Validate command not found"
                exit 1
            fi
            ;;
            
        # Component management
        storage)
            if [[ -x "${COMMANDS_DIR}/storage.zsh" ]]; then
                exec "${COMMANDS_DIR}/storage.zsh" "$@"
            else
                error "Storage command not found"
                exit 1
            fi
            ;;
            
        hardware)
            if [[ -x "${COMMANDS_DIR}/hardware.zsh" ]]; then
                exec "${COMMANDS_DIR}/hardware.zsh" "$@"
            else
                error "Hardware command not found"
                exit 1
            fi
            ;;
            
        services)
            if [[ -x "${COMMANDS_DIR}/services.zsh" ]]; then
                exec "${COMMANDS_DIR}/services.zsh" "$@"
            else
                # Fallback to manage.zsh for now
                if [[ -x "${COMMANDS_DIR}/manage.zsh" ]]; then
                    warning "Using legacy manage.zsh - services.zsh not yet implemented"
                    exec "${COMMANDS_DIR}/manage.zsh" "$@"
                else
                    error "Services command not found"
                    exit 1
                fi
            fi
            ;;
            
        backup)
            if [[ -x "${COMMANDS_DIR}/backup.zsh" ]]; then
                exec "${COMMANDS_DIR}/backup.zsh" "$@"
            else
                error "Backup command not found"
                exit 1
            fi
            ;;
            
        tunnel)
            if [[ -x "${COMMANDS_DIR}/cloudflare.zsh" ]]; then
                exec "${COMMANDS_DIR}/cloudflare.zsh" "$@"
            else
                error "Tunnel command not found"
                exit 1
            fi
            ;;
            
        cluster)
            if [[ -x "${COMMANDS_DIR}/cluster.zsh" ]]; then
                exec "${COMMANDS_DIR}/cluster.zsh" "$@"
            else
                error "Cluster command not found"
                exit 1
            fi
            ;;
            
        test)
            if [[ -x "${COMMANDS_DIR}/test.zsh" ]]; then
                exec "${COMMANDS_DIR}/test.zsh" "$@"
            else
                error "Test command not found"
                exit 1
            fi
            ;;
            
        webtest)
            if [[ -x "${COMMANDS_DIR}/webtest.zsh" ]]; then
                exec "${COMMANDS_DIR}/webtest.zsh" "$@"
            else
                error "Webtest command not found"
                exit 1
            fi
            ;;
            
        # Help system (pyenv-style)
        help)
            if [[ $# -eq 0 ]]; then
                show_main_help
            else
                show_command_help "$1"
            fi
            ;;
            
        # Version
        version|--version)
            show_version
            ;;
            
        # Legacy support with deprecation warnings
        --storage)
            warning "Legacy syntax '--storage' is deprecated"
            warning "Use 'usenet storage' instead"
            route_command storage "$@"
            ;;
            
        --hardware)
            warning "Legacy syntax '--hardware' is deprecated"
            warning "Use 'usenet hardware' instead"
            route_command hardware "$@"
            ;;
            
        --backup)
            warning "Legacy syntax '--backup' is deprecated"
            warning "Use 'usenet backup' instead"
            route_command backup "$@"
            ;;
            
        --tunnel|--cloudflare)
            warning "Legacy syntax '$command' is deprecated"
            warning "Use 'usenet tunnel' instead"
            route_command tunnel "$@"
            ;;
            
        # Legacy direct commands
        setup|install)
            warning "Legacy command '$command' is deprecated"
            warning "Use 'usenet deploy' instead"
            if [[ -x "${COMMANDS_DIR}/setup.zsh" ]]; then
                exec "${COMMANDS_DIR}/setup.zsh" "$@"
            else
                error "Setup command not found"
                exit 1
            fi
            ;;
            
        start|stop|restart|status|logs|update|upgrade)
            warning "Legacy command '$command' is deprecated"
            warning "Use 'usenet services $command' instead"
            if [[ -x "${COMMANDS_DIR}/manage.zsh" ]]; then
                exec "${COMMANDS_DIR}/manage.zsh" "$command" "$@"
            else
                error "Management command not found"
                exit 1
            fi
            ;;
            
        test)
            if [[ -x "${COMMANDS_DIR}/test.zsh" ]]; then
                exec "${COMMANDS_DIR}/test.zsh" "$@"
            else
                error "Test command not found"
                exit 1
            fi
            ;;
            
        # Global flags (when used as first argument)
        --help|-h)
            show_main_help
            ;;
            
        # Unknown command
        "")
            # Empty command - show help
            show_main_help
            ;;
        *)
            error "Unknown command: $command"
            print -u2 ""
            print -u2 "Available commands:"
            print -u2 "  deploy, storage, hardware, services, backup, tunnel, validate"
            print -u2 ""
            print -u2 "Run 'usenet help' for more information"
            print -u2 "Run 'usenet help <command>' for command-specific help"
            exit 1
            ;;
    esac
}

##############################################################################
#                           ARGUMENT PARSING                                 #
##############################################################################

#=============================================================================
# Function: parse_global_flags
# Description: Parse global flags that apply to all commands
#
# Arguments:
#   $@ - All command line arguments
#
# Returns:
#   Remaining arguments after global flags are removed
#=============================================================================
parse_global_flags() {
    local args=()
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --verbose|-v)
                VERBOSE=true
                ;;
            --dry-run|-n)
                DRY_RUN=true
                ;;
            --quiet|-q)
                QUIET=true
                ;;
            --profile)
                if [[ -n "${2:-}" ]]; then
                    PROFILE="$2"
                    shift
                else
                    error "--profile requires a value"
                    exit 1
                fi
                ;;
            --profile=*)
                PROFILE="${1#--profile=}"
                ;;
            --version)
                show_version
                exit 0
                ;;
            --help|-h)
                # Only show main help if it's the only argument
                if [[ $# -eq 1 ]]; then
                    show_main_help
                    exit 0
                else
                    # Pass through to command-specific help
                    args+=("$1")
                fi
                ;;
            --)
                # End of global flags
                shift
                args+=("$@")
                break
                ;;
            -*)
                # Unknown global flag - might be command-specific
                args+=("$1")
                ;;
            *)
                # Not a flag - start of command
                args+=("$@")
                break
                ;;
        esac
        shift
    done
    
    # Export global flags as environment variables for commands
    export USENET_VERBOSE="$VERBOSE"
    export USENET_DRY_RUN="$DRY_RUN" 
    export USENET_QUIET="$QUIET"
    export USENET_PROFILE="$PROFILE"
    
    printf '%s\n' "${args[@]}"
}

##############################################################################
#                              MAIN EXECUTION                                #
##############################################################################

#=============================================================================
# Function: main
# Description: Main entry point (pyenv-style)
#
# Arguments:
#   $@ - Command line arguments
#=============================================================================
main() {
    # Handle special cases that exit immediately
    case "${1:-}" in
        --version)
            show_version
            exit 0
            ;;
        --help|-h)
            if [[ $# -eq 1 ]]; then
                show_main_help
                exit 0
            fi
            ;;
    esac
    
    # Parse global flags first
    local remaining_args=()
    local temp_file=$(mktemp)
    parse_global_flags "$@" > "$temp_file"
    
    while IFS= read -r line; do
        remaining_args+=("$line")
    done < "$temp_file"
    rm -f "$temp_file"
    
    # If no arguments, show help (pyenv behavior)
    if [[ ${#remaining_args[@]} -eq 0 ]]; then
        show_main_help
        exit 0
    fi
    
    # Route to appropriate command
    route_command "${remaining_args[@]}"
}

# Ensure we're not running as root unless explicitly allowed
if [[ $EUID -eq 0 ]] && [[ "${ALLOW_ROOT:-}" != "true" ]]; then
    print -u2 "${COLOR_RED}ERROR: Running as root is not recommended${COLOR_RESET}"
    print -u2 "If you really need to run as root, set ALLOW_ROOT=true"
    exit 1
fi

# Run main function
main "$@"

# vim: set ts=4 sw=4 et tw=80: